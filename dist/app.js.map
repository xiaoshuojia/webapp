{"version":3,"sources":["../src/app.js"],"names":["require","express","path","favicon","logger","cookieParser","bodyParser","http","index","users","posts","api","page","expressLayouts","config","auth","connectMongodb","session","mongoStore","app","set","join","__dirname","use","json","urlencoded","extended","cookieName","static","secret","sessionSecret","store","url","mongodbUrl","resave","saveUninitialized","authUser","req","res","next","err","Error","status","locals","message","error","get","format","send","toString","html","render","default","errorDetails","console","log","server","createServer","listen","module","exports"],"mappings":"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","file":"app.js","sourcesContent":["require('./models/init');\nvar express = require('express');\nvar path = require('path');\nvar favicon = require('serve-favicon');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\nvar http = require('http');\nvar index = require('./routes/index');\nvar users = require('./routes/users');\nvar posts = require('./routes/posts');\nvar api = require('./route.api');\nvar page = require('./route.page');\nvar expressLayouts = require('express-ejs-layouts');\nvar config = require('./config');\nvar auth = require('./middlewares/auth');\nvar connectMongodb = require('connect-mongo');\nvar session = require('express-session');\n\nvar mongoStore = new connectMongodb(session);\nvar app = express();\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'ejs');\napp.use(expressLayouts);\n\n// uncomment after placing your favicon in /public\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser(config.cookieName)); // 解析cookie\napp.use(express.static(path.join(__dirname, 'public')));\n\n\n// app.use('/', index);\n// app.use('/users', users);\n// app.use('/posts', posts);\n// 路由归类\n// 使用session\napp.use(\n  session({\n    secret: config.sessionSecret,\n    store:  new mongoStore({url: config.mongodbUrl}),\n    resave: true,\n    saveUninitialized: true\n  })\n);\napp.use(auth.authUser);\napp.use('/', page)\n.use('/api/v1', api); // use the version\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n\n  // better error handle\n  res.format({\n    json(){\n      res.send({error: err.toString()});\n    },\n    html(){\n      res.render('error');\n    },\n    default(){\n      const message = `${errorDetails}`;\n      console.log('message: ' + message);\n      console.log('error: ' + err.toString());\n      res.send(`500 internal server error\\n${err.toString()}`);\n    }\n  });\n\n});\n\n\nvar server = http.createServer(app);\n\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nserver.listen(3000);\n\nmodule.exports = app;\n"]}