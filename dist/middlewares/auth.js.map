{"version":3,"sources":["../../src/middlewares/auth.js"],"names":["config","require","UserModel","authUser","req","res","next","locals","currentUser","session","user","console","log","authToken","signedCookies","cookieName","findOne","_id","err","toObject","name","isAdmin","admin","adminRequired","Error","status","module","exports"],"mappings":";;AAAA,IAAIA,SAASC,QAAQ,WAAR,CAAb;AACA,IAAIC,YAAYD,QAAQ,gBAAR,CAAhB;;AAEA,SAASE,QAAT,CAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAiC;;AAE/BD,MAAIE,MAAJ,CAAWC,WAAX,GAAyB,IAAzB;;AAEA,MAAGJ,IAAIK,OAAJ,IAAeL,IAAIK,OAAJ,CAAYC,IAA9B,EAAmC;AACjC,QAAMA,OAAON,IAAIK,OAAJ,CAAYC,IAAzB;AACAC,YAAQC,GAAR,CAAY,kBAAkBR,IAAIK,OAAlC;AACAJ,QAAIE,MAAJ,CAAWC,WAAX,GAAyBE,IAAzB;AACAJ;AACD,GALD,MAKM;AACJ,QAAMO,YAAYT,IAAIU,aAAJ,CAAkBd,OAAOe,UAAzB,KAAwC,EAA1D;AACAJ,YAAQC,GAAR,CAAY,gBAAgBC,SAA5B;AACA,QAAIA,SAAJ,EAAc;AACZX,gBAAUc,OAAV,CAAkB,EAAEC,KAAKJ,SAAP,EAAlB,EAAsC,UAASK,GAAT,EAAcR,IAAd,EAAmB;AACvD,YAAIQ,OAAO,CAACR,IAAZ,EAAiB;AAAE;;AAEjBJ,iBAFe,CAEL;AACX,SAHD,MAII;AACF;AACA;AACA;AACA;AACA;AACAI,iBAAOA,KAAKS,QAAL,EAAP;AACAR,kBAAQC,GAAR,CAAY,gBAAgBF,KAAKU,IAAjC;AACA;AACA;AACA;AACAV,eAAKW,OAAL,GAAeX,KAAKU,IAAL,KAAcpB,OAAOsB,KAApC,CAXE,CAW0C;AAC5ClB,cAAIK,OAAJ,CAAYC,IAAZ,GAAmBA,IAAnB,CAZE,CAYwB;AAC1BC,kBAAQC,GAAR,CAAY,+BAA+BR,IAAIK,OAAJ,CAAYC,IAAZ,CAAiBW,OAA5D;AACAV,kBAAQC,GAAR,CAAY,WAAUF,IAAtB;AACAL,cAAIE,MAAJ,CAAWC,WAAX,GAAyBE,IAAzB;AACAC,kBAAQC,GAAR,CAAY,6BAA6BP,IAAIE,MAAJ,CAAWC,WAApD;AACAF;AAED;AAEF,OA1BD;AA2BD,KA5BD,MA6BK;AACHA;AACD;AACF;AAEF;;AAED,SAASiB,aAAT,CAAuBnB,GAAvB,EAA4BC,GAA5B,EAAiCC,IAAjC,EAAsC;AACpC;AACA;AACA,MAAI,CAACF,IAAIK,OAAL,IAAgB,CAACL,IAAIK,OAAJ,CAAYC,IAAjC,EAAsC;AACpC;AACA;AACA,QAAIQ,MAAM,IAAIM,KAAJ,CAAU,MAAV,CAAV,CAHoC,CAGJ;AAChCN,QAAIO,MAAJ,GAAa,GAAb,CAJoC,CAIF;AAClCnB,SAAKY,GAAL;AACA;AACD;AACD,MAAI,CAACd,IAAIK,OAAJ,CAAYC,IAAZ,CAAiBW,OAAtB,EAA8B;AAC5BV,YAAQC,GAAR,CAAY,4BAA4BR,IAAIK,OAAJ,CAAYC,IAAZ,CAAiBU,IAAzD;AACAT,YAAQC,GAAR,CAAY,+BAA+BR,IAAIK,OAAJ,CAAYC,IAAZ,CAAiBW,OAA5D;AACA,QAAIH,OAAM,IAAIM,KAAJ,CAAU,SAAV,CAAV;AACAN,SAAIO,MAAJ,GAAa,GAAb;AACAnB,SAAKY,IAAL;AACA;AACD;AACDZ;AACD;;AAEDoB,OAAOC,OAAP,GAAiB,EAAExB,kBAAF,EAAYoB,4BAAZ,EAAjB","file":"auth.js","sourcesContent":["var config = require('../config');\nvar UserModel = require('../models/user');\n\nfunction authUser(req, res, next){\n\n  res.locals.currentUser = null;\n\n  if(req.session && req.session.user){\n    const user = req.session.user;\n    console.log('req.session: ' + req.session);\n    res.locals.currentUser = user;\n    next();\n  }else {\n    const authToken = req.signedCookies[config.cookieName] || '';\n    console.log('authToken: ' + authToken);\n    if (authToken){\n      UserModel.findOne({ _id: authToken }, function(err, user){\n        if (err || !user){ //没有用户 或出错\n\n          next();   // 为何这里不next(err)，我觉得可能是游客也能登录\n        }\n        else{\n          // 通过mongodb查找到的user对象，不能直接往里面动态的插入属性\n          // 比如：user.a = 1; 无效\n          // 一定要先下面一下。明白了吗？\n          //  我的教程也有点问题，我要改一下\n          //  哦啦\n          user = user.toObject();\n          console.log('user.name: ' + user.name);\n          // if(user.name === config.admin){  // 管理员\n          //   user.isAdmin = true;\n          // }\n          user.isAdmin = user.name === config.admin;  // 精简代码\n          req.session.user = user;  // 为什么给req？为了保存信息，用来判断是不是已有的用户\n          console.log('req.session.user.isAdmin: ' + req.session.user.isAdmin);\n          console.log('user: '+ user);\n          res.locals.currentUser = user;\n          console.log('res.logcals.currentUser:' + res.locals.currentUser);\n          next();\n\n        }\n\n      });\n    }\n    else {\n      next();\n    }\n  }\n\n}\n\nfunction adminRequired(req, res, next){\n  // console.log('adminRequired: req.session.user.name: ' + req.session.user.name);\n  // console.log('adminRequired: req.session.user.isAdmin: ' + req.session.user.isAdmin);\n  if (!req.session || !req.session.user){\n    // console.log('req.session.user.name: ' + req.session.user.name);\n    // console.log('req.session.user.isAdmin: ' + req.session.user.isAdmin);\n    let err = new Error('需要登录');    // let是做什么？\n    err.status = 403;                 // 403?\n    next(err);\n    return;\n  }\n  if (!req.session.user.isAdmin){\n    console.log('req.session.user.name: ' + req.session.user.name);\n    console.log('req.session.user.isAdmin: ' + req.session.user.isAdmin);\n    let err = new Error('需要管理员权限');\n    err.status = 403;\n    next(err);\n    return;\n  }\n  next();\n}\n\nmodule.exports = { authUser, adminRequired };\n"]}